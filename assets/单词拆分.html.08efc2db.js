import{_ as t,o as e,c as p,b as n,e as o,a as c,d as s,r as l}from"./app.fbdceb87.js";const i="/assets/dccf.15571891.svg",r={},u=s('<h2 id="\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a> \u9898\u76EE</h2><p>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 <code>s</code> \u548C\u4E00\u4E2A\u5B57\u7B26\u4E32\u5217\u8868 <code>wordDict</code> \u4F5C\u4E3A\u5B57\u5178\u3002\u8BF7\u4F60\u5224\u65AD\u662F\u5426\u53EF\u4EE5\u5229\u7528\u5B57\u5178\u4E2D\u51FA\u73B0\u7684\u5355\u8BCD\u62FC\u63A5\u51FA <code>s</code> \u3002</p><p>**\u6CE8\u610F\uFF1A**\u4E0D\u8981\u6C42\u5B57\u5178\u4E2D\u51FA\u73B0\u7684\u5355\u8BCD\u5168\u90E8\u90FD\u4F7F\u7528\uFF0C\u5E76\u4E14\u5B57\u5178\u4E2D\u7684\u5355\u8BCD\u53EF\u4EE5\u91CD\u590D\u4F7F\u7528\u3002</p><h2 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h2><p>\u628A<code>s</code>\u9010\u4E2A\u5B57\u6BCD\u62C6\u5206\uFF0C\u7528<code>set</code>\u8BB0\u5F55<code>wordDict</code>\u7684\u5355\u8BCD\uFF0C\u62C6\u5206\u540E\u63A5\u7740\u9012\u5F52\u5F80\u4E0B\u62C6 \u5176\u4E2D\u82E5\u62C6\u51FA\u6765\u7684\u5B50\u4E32\u4E0D\u80FD\u7531\u5355\u8BCD\u6784\u6210\u76F4\u63A5\u505C\u6B62\u9012\u5F52</p>',5),k={href:"https://leetcode.cn/problems/word-break/solution/by-lfool-jjq9/",target:"_blank",rel:"noopener noreferrer"},d=s('<h2 id="\u56FE\u89E3" tabindex="-1"><a class="header-anchor" href="#\u56FE\u89E3" aria-hidden="true">#</a> \u56FE\u89E3</h2><p><img src="'+i+`" alt="alt"></p><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">wordDict</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">wordBreak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> wordDict</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>wordDict<span class="token punctuation">)</span>
    <span class="token keyword">let</span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">==</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> item <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>word<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
           <span class="token keyword">let</span> flag <span class="token operator">=</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                memo<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>
        memo<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> 
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(v,b){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",k,[o("\u56DE\u6EAF\u7B97\u6CD5\uFF1A\u5355\u8BCD\u62C6\u5206\u300C\u8D85\u7EA7\u65E0\u654C\u8BE6\u7EC6\u5206\u6790 \u{1F525}\u{1F525}\u{1F525}\u300D - \u5355\u8BCD\u62C6\u5206 - \u529B\u6263\uFF08LeetCode\uFF09"),c(a)])]),d])}const h=t(r,[["render",m],["__file","\u5355\u8BCD\u62C6\u5206.html.vue"]]);export{h as default};
